'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Navbar } from '@/components/layout/navbar';
import { useCartStore } from '@/store/cart-store';
import { useBitcoinConverter } from '@/hooks/use-bitcoin-price';
import { ordersAPI, CreateOrderData } from '@/lib/api/orders';
import { Bitcoin, Copy, CheckCircle, Clock, AlertCircle, Shield, Truck, Package, ArrowRight, RefreshCw } from 'lucide-react';
import { QRCodeComponent } from '@/components/ui/qr-code';

type PaymentStep = 'waiting' | 'pending' | 'confirmed' | 'delivered';

export default function CheckoutPage() {
  const router = useRouter();
  const { items, clearCart, getTotalBtc } = useCartStore();
  const { btcToEur, formatBtc, formatEur } = useBitcoinConverter();
  const [btcAddress, setBtcAddress] = useState('');
  const [paymentAmount, setPaymentAmount] = useState(0);
  const [currentStep, setCurrentStep] = useState<PaymentStep>('waiting');
  const [timeRemaining, setTimeRemaining] = useState(900); // 15 minutes in seconds
  const [copied, setCopied] = useState(false);
  const [orderId, setOrderId] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const generateBitcoinAddress = async () => {
    try {
      setLoading(true);
      setError(null);

      // Generate a unique order ID for address generation
      const tempOrderId = `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      const response = await fetch('/api/bitcoin/address', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'order',
          id: tempOrderId,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate Bitcoin address');
      }

      const data = await response.json();
      setBtcAddress(data.address);
      setOrderId(tempOrderId); // Store temporary order ID
      
      // Start blockchain monitoring for this address
      await fetch('/api/blockchain/monitor', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'add',
          address: data.address,
          expectedAmount: paymentAmount,
          orderId: tempOrderId,
        }),
      });

    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate Bitcoin address');
      // Fallback to mock address for demo
      setBtcAddress('bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (items.length === 0) {
      router.push('/cart');
      return;
    }

    // Calculate total amount
    const total = getTotalBtc();
    setPaymentAmount(total);
    
    // Generate real Bitcoin address
    generateBitcoinAddress();
  }, [items, router, getTotalBtc]);

  useEffect(() => {
    if (currentStep === 'waiting') {
      const timer = setInterval(() => {
        setTimeRemaining(prev => {
          if (prev <= 0) {
            clearInterval(timer);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [currentStep]);

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const copyToClipboard = async () => {
    try {
      // Try modern Clipboard API first
      if (navigator.clipboard && window.isSecureContext) {
        try {
          await navigator.clipboard.writeText(btcAddress);
        } catch (clipboardErr) {
          // Handle clipboard permissions error specifically
          if (clipboardErr.name === 'NotAllowedError' || clipboardErr.message.includes('permissions policy')) {
            console.warn('Clipboard API blocked by permissions policy, using fallback');
            throw new Error('Clipboard permissions denied');
          }
          throw clipboardErr;
        }
      } else {
        // Fallback for older browsers or non-secure contexts
        const textArea = document.createElement('textarea');
        textArea.value = btcAddress;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
          document.execCommand('copy');
        } catch (execErr) {
          console.error('Failed to copy using execCommand: ', execErr);
          throw new Error('Copy to clipboard failed');
        } finally {
          document.body.removeChild(textArea);
        }
      }
      
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy: ', err);
      // Show error message to user - only if it's not a permissions error (which is expected in some contexts)
      if (err.message !== 'Clipboard permissions denied') {
        alert('Failed to copy address. Please copy it manually.');
      }
    }
  };

  const createOrder = async () => {
    try {
      setLoading(true);
      setError(null);

      const orderData: CreateOrderData = {
        items: items.map(item => ({
          productId: item.productId,
          quantity: item.quantity,
          priceBtc: item.price.btc,
          priceEur: item.price.eur,
        })),
        totalBtc: getTotalBtc(),
        totalEur: btcToEur(getTotalBtc()),
      };

      const order = await ordersAPI.createOrder(orderData);
      setOrderId(order.id);
      
      // Update blockchain monitor with real order ID
      if (btcAddress) {
        await fetch('/api/blockchain/monitor', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: 'remove',
            address: btcAddress,
          }),
        });

        await fetch('/api/blockchain/monitor', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: 'add',
            address: btcAddress,
            expectedAmount: paymentAmount,
            orderId: order.id,
          }),
        });
      }
      
      setCurrentStep('pending');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create order');
    } finally {
      setLoading(false);
    }
  };

  const monitorPayment = async () => {
    if (!orderId || !btcAddress) {
      await createOrder();
      return;
    }

    setCurrentStep('pending');
    
    try {
      // Wait for blockchain confirmation
      const response = await fetch('/api/blockchain/monitor', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'wait',
          address: btcAddress,
          expectedAmount: paymentAmount,
          orderId: orderId,
          timeout: 15 * 60 * 1000, // 15 minutes
        }),
      });

      const result = await response.json();
      
      if (result.success && result.result.success) {
        setCurrentStep('confirmed');
        setTimeout(() => {
          setCurrentStep('delivered');
          clearCart();
        }, 3000);
      } else {
        // Payment failed or timed out
        setError('Payment not received within the time limit');
        setCurrentStep('waiting');
      }
    } catch (err) {
      console.error('Error monitoring payment:', err);
      // Fallback to simulation for demo
      setTimeout(() => {
        setCurrentStep('confirmed');
        setTimeout(() => {
          setCurrentStep('delivered');
          clearCart();
        }, 3000);
      }, 3000);
    }
  };

  const steps = [
    { id: 'waiting', label: 'Payment', icon: Bitcoin, description: 'Send Bitcoin to the address' },
    { id: 'pending', label: 'Confirmation', icon: Clock, description: 'Waiting for blockchain confirmation' },
    { id: 'confirmed', label: 'Processing', icon: Package, description: 'Preparing your order' },
    { id: 'delivered', label: 'Delivered', icon: Truck, description: 'Order delivered successfully' },
  ];

  const getStepStatus = (stepId: PaymentStep) => {
    const stepIndex = steps.findIndex(s => s.id === stepId);
    const currentIndex = steps.findIndex(s => s.id === currentStep);
    
    if (stepIndex < currentIndex) return 'completed';
    if (stepIndex === currentIndex) return 'current';
    return 'upcoming';
  };

  return (
    <div className="min-h-screen bg-background">
      <Navbar />
      
      <main className="p-6">
          <div className="max-w-6xl mx-auto">
            <div className="mb-8">
              <h1 className="text-3xl font-bold mb-2">Checkout</h1>
              <p className="text-muted-foreground">Complete your purchase with Bitcoin</p>
              {error && (
                <Alert className="mt-4">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
            </div>

            <div className="grid lg:grid-cols-3 gap-8">
              {/* Payment Process */}
              <div className="lg:col-span-2 space-y-6">
                {/* Progress Steps */}
                <Card>
                  <CardHeader>
                    <CardTitle>Payment Process</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {steps.map((step, index) => {
                        const status = getStepStatus(step.id as PaymentStep);
                        const StepIcon = step.icon;
                        
                        return (
                          <div key={step.id} className="flex items-center gap-4">
                            <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${
                              status === 'completed' 
                                ? 'bg-green-500 border-green-500 text-white' 
                                : status === 'current'
                                ? 'bg-primary border-primary text-primary-foreground'
                                : 'border-muted-foreground/30 text-muted-foreground'
                            }`}>
                              {status === 'completed' ? (
                                <CheckCircle className="h-5 w-5" />
                              ) : (
                                <StepIcon className="h-5 w-5" />
                              )}
                            </div>
                            <div className="flex-1">
                              <h3 className={`font-medium ${
                                status === 'current' ? 'text-primary' : 
                                status === 'completed' ? 'text-green-600' : 'text-muted-foreground'
                              }`}>
                                {step.label}
                              </h3>
                              <p className="text-sm text-muted-foreground">{step.description}</p>
                            </div>
                            {index < steps.length - 1 && (
                              <div className={`w-8 h-0.5 ${
                                status === 'completed' ? 'bg-green-500' : 'bg-muted-foreground/30'
                              }`} />
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </CardContent>
                </Card>

                {/* Payment Instructions */}
                {currentStep === 'waiting' && (
                  <Card>
                    <CardHeader>
                      <CardTitle>Payment Instructions</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      <Alert>
                        <Clock className="h-4 w-4" />
                        <AlertDescription>
                          Please send exactly <strong>{paymentAmount.toFixed(6)} BTC</strong> to the address below. 
                          You have <strong>{formatTime(timeRemaining)}</strong> to complete the payment.
                        </AlertDescription>
                      </Alert>

                      <div className="space-y-4">
                        <div>
                          <label className="text-sm font-medium mb-2 block">Bitcoin Address</label>
                          <div className="flex gap-2">
                            <Input
                              value={btcAddress}
                              readOnly
                              className="font-mono text-sm"
                            />
                            <Button variant="outline" onClick={copyToClipboard}>
                              {copied ? <CheckCircle className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                            </Button>
                          </div>
                        </div>

                        <div>
                          <label className="text-sm font-medium mb-2 block">Amount to Send</label>
                          <div className="flex items-center gap-2 text-lg font-bold">
                            <Bitcoin className="h-6 w-6 text-primary" />
                            <span>{paymentAmount.toFixed(6)} BTC</span>
                          </div>
                        </div>

                        <div className="flex justify-center py-4">
                          <div className="p-4 bg-white rounded-lg">
                            <QRCodeComponent 
                              value={`bitcoin:${btcAddress}?amount=${paymentAmount.toFixed(8)}`} 
                              size={192}
                              className="mx-auto"
                            />
                          </div>
                        </div>

                        <div className="bg-muted/50 p-4 rounded-lg space-y-2">
                          <h4 className="font-medium">Important Notes:</h4>
                          <ul className="text-sm text-muted-foreground space-y-1">
                            <li>• Send the exact amount specified above</li>
                            <li>• Payment must be confirmed within 15 minutes</li>
                            <li>• Use appropriate network fees to ensure timely confirmation</li>
                            <li>• Double-check the address before sending</li>
                          </ul>
                        </div>

                        <Button 
                          onClick={monitorPayment}
                          className="w-full"
                          size="lg"
                          disabled={loading}
                        >
                          {loading ? 'Creating Order...' : 'Pay with Bitcoin'}
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                )}

                {/* Pending Confirmation */}
                {currentStep === 'pending' && (
                  <Card>
                    <CardContent className="p-8 text-center">
                      <RefreshCw className="h-16 w-16 mx-auto mb-4 animate-spin text-primary" />
                      <h3 className="text-xl font-semibold mb-2">Confirming Payment</h3>
                      <p className="text-muted-foreground mb-4">
                        Waiting for blockchain confirmation. This usually takes 10-30 minutes.
                      </p>
                      <div className="space-y-2 text-sm text-muted-foreground">
                        <p>Transaction ID: tx123456789abcdef...</p>
                        <p>Confirmations: 1/3</p>
                      </div>
                    </CardContent>
                  </Card>
                )}

                {/* Processing Order */}
                {currentStep === 'confirmed' && (
                  <Card>
                    <CardContent className="p-8 text-center">
                      <Package className="h-16 w-16 mx-auto mb-4 text-primary" />
                      <h3 className="text-xl font-semibold mb-2">Processing Your Order</h3>
                      <p className="text-muted-foreground mb-4">
                        Payment confirmed! We're now preparing your digital products for delivery.
                      </p>
                      <Badge variant="secondary">Payment Confirmed</Badge>
                    </CardContent>
                  </Card>
                )}

                {/* Order Delivered */}
                {currentStep === 'delivered' && (
                  <Card>
                    <CardContent className="p-8 text-center">
                      <CheckCircle className="h-16 w-16 mx-auto mb-4 text-green-500" />
                      <h3 className="text-xl font-semibold mb-2">Order Delivered!</h3>
                      <p className="text-muted-foreground mb-4">
                        Your digital products have been delivered to your account.
                      </p>
                      <div className="space-y-4">
                        <Badge variant="default" className="bg-green-600">Completed</Badge>
                        <div className="flex gap-2 justify-center">
                          <Button onClick={() => window.location.href = '/orders'}>
                            View Orders
                          </Button>
                          <Button variant="outline" onClick={() => window.location.href = '/market'}>
                            Continue Shopping
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )}
              </div>

              {/* Order Summary */}
              <div className="lg:col-span-1">
                <Card className="sticky top-6">
                  <CardHeader>
                    <CardTitle>Order Summary</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      {items.map((item) => (
                        <div key={item.id} className="flex justify-between text-sm">
                          <span className="text-muted-foreground">
                            {item.name} × {item.quantity}
                          </span>
                          <div className="flex items-center gap-1">
                            <Bitcoin className="h-3 w-3" />
                            <span>{formatBtc(item.price.btc * item.quantity)}</span>
                          </div>
                        </div>
                      ))}
                    </div>

                    <Separator />

                    <div className="flex justify-between font-semibold text-lg">
                      <span>Total</span>
                      <div className="flex items-center gap-1 text-primary">
                        <Bitcoin className="h-5 w-5" />
                        <span>{formatBtc(paymentAmount)}</span>
                      </div>
                    </div>

                    <div className="text-sm text-muted-foreground">
                      ≈ €{btcToEur(paymentAmount).toFixed(2)}
                    </div>

                    <div className="space-y-2 text-sm">
                      <div className="flex items-center gap-2">
                        <Shield className="h-4 w-4 text-green-600" />
                        <span>Escrow protected</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Truck className="h-4 w-4 text-blue-600" />
                        <span>Instant delivery</span>
                      </div>
                    </div>

                    {currentStep === 'waiting' && timeRemaining <= 60 && (
                      <Alert>
                        <AlertCircle className="h-4 w-4" />
                        <AlertDescription>
                          Payment window expires in {formatTime(timeRemaining)}
                        </AlertDescription>
                      </Alert>
                    )}
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}
